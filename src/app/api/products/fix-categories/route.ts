import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabaseAdmin";

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ Fixing product categories...");

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    const { data: products, error: fetchError } = await supabaseAdmin
      .from("products")
      .select("id, external_id, category");

    if (fetchError) {
      throw fetchError;
    }

    console.log(`üì¶ Found ${products?.length || 0} products to update`);

    // –ú–∞–ø—ñ–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ XML —Ñ—ñ–¥—É
    const categoryMap: { [key: string]: string } = {
      "1": "–ê–∫—É–º—É–ª—è—Ç–æ—Ä–∏ —Ç–∞ powerbank",
      "3": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó", 
      "14": "–ó–∞—Ä—è–¥–∫–∏ —Ç–∞ –∫–∞–±–µ–ª—ñ",
      "15": "–ú–µ—Ä–µ–∂–µ–≤—ñ –∑–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó",
      "16": "–ö–∞–±–µ–ª—ñ USB",
      "80": "–ë–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ –∑–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó"
    };

    let updatedCount = 0;
    let errorCount = 0;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
    for (const product of products || []) {
      try {
        // –û—Ç—Ä–∏–º—É—î–º–æ categoryId –∑ external_id (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        let categoryId = null;
        
        // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è - —Ü–µ ID, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
        if (product.category && Object.keys(categoryMap).includes(product.category)) {
          categoryId = product.category;
        } else {
          // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ categoryId –∑ XML —Ñ—ñ–¥—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
          // –ü–æ–∫–∏ —â–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ categoryId
          continue;
        }

        const newCategory = categoryMap[categoryId];
        if (newCategory && newCategory !== product.category) {
          const { error: updateError } = await supabaseAdmin
            .from("products")
            .update({ category: newCategory })
            .eq("id", product.id);

          if (updateError) {
            console.error(`‚ùå Error updating product ${product.id}:`, updateError);
            errorCount++;
          } else {
            updatedCount++;
            console.log(`‚úÖ Updated product ${product.id}: ${product.category} -> ${newCategory}`);
          }
        }
      } catch (error) {
        console.error(`‚ùå Error processing product ${product.id}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ Category fix completed: ${updatedCount} updated, ${errorCount} errors`);

    return NextResponse.json({
      success: true,
      message: "Categories fixed successfully",
      stats: {
        total: products?.length || 0,
        updated: updatedCount,
        errors: errorCount
      }
    });

  } catch (error) {
    console.error("‚ùå Error fixing categories:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Failed to fix categories",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
