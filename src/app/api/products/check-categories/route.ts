import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabaseAdmin";

export async function GET(request: NextRequest) {
  try {
    console.log("üîç Checking products without categories...");

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const { data: productsWithoutCategories, error: noCategoryError } =
      await supabaseAdmin
        .from("products")
        .select("id, external_id, name, category_id")
        .is("category_id", null);

    if (noCategoryError) {
      console.error(
        "‚ùå Error checking products without categories:",
        noCategoryError
      );
      return NextResponse.json({
        success: false,
        error: noCategoryError.message,
      });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    const { data: allProducts, error: allProductsError } = await supabaseAdmin
      .from("products")
      .select("id, external_id, name, category_id");

    if (allProductsError) {
      console.error("‚ùå Error fetching all products:", allProductsError);
      return NextResponse.json({
        success: false,
        error: allProductsError.message,
      });
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ category_id
    const { data: categories, error: categoriesError } = await supabaseAdmin
      .from("categories")
      .select("id");

    if (categoriesError) {
      console.error("‚ùå Error fetching categories:", categoriesError);
      return NextResponse.json({
        success: false,
        error: categoriesError.message,
      });
    }

    const existingCategoryIds = new Set(categories?.map((c) => c.id) || []);

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    const productsWithInvalidCategories =
      allProducts?.filter(
        (product) =>
          product.category_id && !existingCategoryIds.has(product.category_id)
      ) || [];

    console.log(
      `üìä Found ${
        productsWithoutCategories?.length || 0
      } products without categories`
    );
    console.log(
      `üìä Found ${productsWithInvalidCategories.length} products with invalid categories`
    );

    return NextResponse.json({
      success: true,
      stats: {
        totalProducts: allProducts?.length || 0,
        withoutCategories: productsWithoutCategories?.length || 0,
        withInvalidCategories: productsWithInvalidCategories.length,
        withValidCategories:
          (allProducts?.length || 0) -
          (productsWithoutCategories?.length || 0) -
          productsWithInvalidCategories.length,
      },
      productsWithoutCategories: productsWithoutCategories?.slice(0, 10) || [], // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
      productsWithInvalidCategories: productsWithInvalidCategories.slice(0, 10), // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 10
    });
  } catch (error) {
    console.error("‚ùå Unexpected error:", error);
    return NextResponse.json(
      { success: false, error: "Internal server error" },
      { status: 500 }
    );
  }
}
