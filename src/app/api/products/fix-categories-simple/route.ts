import { NextRequest, NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabaseAdmin";

export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ Fixing product categories based on product names...");

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é "Uncategorized"
    const { data: products, error: fetchError } = await supabaseAdmin
      .from("products")
      .select("id, name, category")
      .eq("category", "Uncategorized");

    if (fetchError) {
      throw fetchError;
    }

    console.log(`üì¶ Found ${products?.length || 0} products with Uncategorized to fix`);

    let updatedCount = 0;
    let errorCount = 0;

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤ —Ç–æ–≤–∞—Ä—ñ–≤
    for (const product of products || []) {
      try {
        let newCategory = "Uncategorized";
        const name = product.name.toLowerCase();

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É
        if (name.includes("power bank") || name.includes("–ø–æ–≤–µ—Ä–±–∞–Ω–∫") || name.includes("–±–∞—Ç–∞—Ä–µ—è") || name.includes("–∞–∫—É–º—É–ª—è—Ç–æ—Ä")) {
          newCategory = "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ñ –±–∞—Ç–∞—Ä–µ—ó";
        } else if (name.includes("–∑–∞—Ä—è–¥–Ω–∏–π") || name.includes("–∑–∞—Ä—è–¥–∫–∞") || name.includes("–∞–¥–∞–ø—Ç–µ—Ä") || name.includes("charger")) {
          newCategory = "–ú–µ—Ä–µ–∂–µ–≤—ñ –∑–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó";
        } else if (name.includes("–∫–∞–±–µ–ª—å") || name.includes("cable") || name.includes("usb") || name.includes("lightning") || name.includes("type-c")) {
          newCategory = "–ö–∞–±–µ–ª—ñ USB";
        } else if (name.includes("–±–µ–∑–¥—Ä–æ—Ç–æ–≤–∏–π") || name.includes("wireless") || name.includes("qi")) {
          newCategory = "–ë–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ –∑–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó";
        }

        if (newCategory !== "Uncategorized") {
          const { error: updateError } = await supabaseAdmin
            .from("products")
            .update({ category: newCategory })
            .eq("id", product.id);

          if (updateError) {
            console.error(`‚ùå Error updating product ${product.id}:`, updateError);
            errorCount++;
          } else {
            updatedCount++;
            console.log(`‚úÖ Updated product ${product.id}: ${product.name.substring(0, 50)}... -> ${newCategory}`);
          }
        }
      } catch (error) {
        console.error(`‚ùå Error processing product ${product.id}:`, error);
        errorCount++;
      }
    }

    console.log(`‚úÖ Category fix completed: ${updatedCount} updated, ${errorCount} errors`);

    return NextResponse.json({
      success: true,
      message: "Categories fixed successfully",
      stats: {
        total: products?.length || 0,
        updated: updatedCount,
        errors: errorCount
      }
    });

  } catch (error) {
    console.error("‚ùå Error fixing categories:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Failed to fix categories",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
