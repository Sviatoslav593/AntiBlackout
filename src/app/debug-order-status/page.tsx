"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export default function DebugOrderStatusPage() {
  const [testResults, setTestResults] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const testOrderNumber = "ce4b2e64-3203-4cef-9d9e-37c13967e37b";

  const runTests = async () => {
    setIsLoading(true);
    setTestResults([]);

    const tests = [
      {
        name: "–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ä–æ—É—Ç–∏–Ω–≥—É",
        url: "/order-status/test-basic",
        description: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î –±–∞–∑–æ–≤–∏–π —Ä–æ—É—Ç–∏–Ω–≥ –¥–ª—è order-status",
      },
      {
        name: "–¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ UUID",
        url: `/order-status/${testOrderNumber}`,
        description: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î —Ä–æ—É—Ç–∏–Ω–≥ –∑ —Ä–µ–∞–ª—å–Ω–∏–º UUID",
      },
      {
        name: "–¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 404 –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        url: "/order-status/non-existent-order",
        description: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è 404",
      },
      {
        name: "–¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API order/get",
        url: "/api/order/get?orderId=test",
        description: "–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞—Ü—é—î API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      },
    ];

    const results = [];

    for (const test of tests) {
      try {
        console.log(`üß™ Running test: ${test.name}`);

        const response = await fetch(test.url, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const result = {
          name: test.name,
          url: test.url,
          description: test.description,
          status: response.status,
          statusText: response.statusText,
          success: response.ok,
          timestamp: new Date().toISOString(),
          headers: Object.fromEntries(response.headers.entries()),
        };

        // –Ø–∫—â–æ —Ü–µ –Ω–µ API –∑–∞–ø–∏—Ç, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (!test.url.startsWith("/api/")) {
          try {
            const text = await response.text();
            result.responseText = text.substring(0, 500); // –ü–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤
          } catch (e) {
            result.responseText = "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å";
          }
        }

        results.push(result);
        console.log(
          `‚úÖ Test completed: ${test.name} - Status: ${response.status}`
        );
      } catch (error) {
        const result = {
          name: test.name,
          url: test.url,
          description: test.description,
          status: "ERROR",
          statusText: error instanceof Error ? error.message : "Unknown error",
          success: false,
          timestamp: new Date().toISOString(),
          error: error instanceof Error ? error.stack : String(error),
        };
        results.push(result);
        console.error(`‚ùå Test failed: ${test.name}`, error);
      }
    }

    setTestResults(results);
    setIsLoading(false);
  };

  const getStatusBadge = (result: any) => {
    if (result.success) {
      return <Badge className="bg-green-100 text-green-800">‚úÖ –£—Å–ø—ñ—à–Ω–æ</Badge>;
    } else if (result.status === 404) {
      return <Badge className="bg-yellow-100 text-yellow-800">‚ö†Ô∏è 404</Badge>;
    } else {
      return <Badge className="bg-red-100 text-red-800">‚ùå –ü–æ–º–∏–ª–∫–∞</Badge>;
    }
  };

  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-4">
            <p className="text-gray-600">
              –¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ—É—Ç–∏–Ω–≥–æ–º —Å—Ç–æ—Ä—ñ–Ω–∫–∏
              —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
            </p>

            <div className="p-4 bg-blue-50 border border-blue-200 rounded">
              <h3 className="font-semibold text-blue-800 mb-2">
                –¢–µ—Å—Ç–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
              </h3>
              <code className="bg-blue-100 px-2 py-1 rounded text-sm">
                {testOrderNumber}
              </code>
            </div>

            <Button onClick={runTests} disabled={isLoading} className="w-full">
              {isLoading ? "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤..." : "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É"}
            </Button>
          </div>

          {testResults.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤:</h3>

              {testResults.map((result, index) => (
                <Card key={index} className="border-l-4 border-l-blue-500">
                  <CardContent className="pt-4">
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-medium">{result.name}</h4>
                      {getStatusBadge(result)}
                    </div>

                    <p className="text-sm text-gray-600 mb-3">
                      {result.description}
                    </p>

                    <div className="space-y-2 text-sm">
                      <div>
                        <span className="font-medium">URL:</span>
                        <code className="ml-2 bg-gray-100 px-2 py-1 rounded">
                          {result.url}
                        </code>
                      </div>

                      <div>
                        <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span>
                        <span className="ml-2">
                          {result.status} - {result.statusText}
                        </span>
                      </div>

                      <div>
                        <span className="font-medium">–ß–∞—Å:</span>
                        <span className="ml-2">
                          {new Date(result.timestamp).toLocaleTimeString()}
                        </span>
                      </div>

                      {result.responseText && (
                        <div>
                          <span className="font-medium">–í—ñ–¥–ø–æ–≤—ñ–¥—å:</span>
                          <pre className="mt-1 p-2 bg-gray-100 rounded text-xs overflow-auto max-h-32">
                            {result.responseText}
                          </pre>
                        </div>
                      )}

                      {result.error && (
                        <div>
                          <span className="font-medium text-red-600">
                            –ü–æ–º–∏–ª–∫–∞:
                          </span>
                          <pre className="mt-1 p-2 bg-red-50 rounded text-xs overflow-auto max-h-32">
                            {result.error}
                          </pre>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded">
            <h3 className="font-semibold text-yellow-800 mb-2">
              –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏:
            </h3>
            <ul className="text-yellow-700 text-sm space-y-1">
              <li>‚Ä¢ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä—ñ</li>
              <li>‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∫–µ—à–µ–º CDN –∞–±–æ –±—Ä–∞—É–∑–µ—Ä–∞</li>
              <li>‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤–µ—Ä–∞</li>
              <li>‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ –∑ Next.js —Ä–æ—É—Ç–∏–Ω–≥–æ–º</li>
              <li>‚Ä¢ –î–æ–º–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
